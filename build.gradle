plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.14'
}

version = '1.21.1-8.0.1'
group = 'com.blakebr0.cucumber'

base {
    archivesName = 'Cucumber'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

neoForge {
    version = neo_version

    parchment {
        mappingsVersion = parchment_mappings_version
        minecraftVersion = parchment_minecraft_version
    }

    runs {
        client {
            client()
        }

        server {
            server()
        }

        gameTestServer {
            type = "gameTestServer"
        }

        data {
            data()

            // programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            jvmArgument '-Dmixin.debug.export=true'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        cucumber {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        url = 'https://maven.blamejared.com/'
        content {
            includeGroup "com.almostreliable.mods"
        }
    }

    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        url = "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

dependencies {
    implementation "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
    implementation "dev.latvian.mods:rhino-neoforge:${rhino_version}"
    implementation "dev.architectury:architectury-neoforge:${architectury_version}"

    compileOnly "com.almostreliable.mods:almostunified-forge:${almostunified_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version            : version.split('-').last(),
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        maven {
            url = 'https://maven.blakesmods.com'

            credentials {
                username = System.getenv('BLAKESMODS_MAVEN_USERNAME')
                password = System.getenv('BLAKESMODS_MAVEN_PASSWORD')
            }

            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}